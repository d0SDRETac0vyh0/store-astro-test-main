---
// src/pages/admin/products/[...slug].astro
import ProductImage from '@/components/products/ProductImage.astro';
import ProductSlideshow from '@/components/products/ProductSlideshow.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { actions } from 'astro:actions';

const { slug } = Astro.params;

const { data, error } = await actions.getProductsBySlug.safe(slug ?? '');

if (error) {
  return Astro.redirect('/404');
}

const { product, images } = data;
---

<MainLayout title="Mantenimiento de producto">
  <h1 class="text-white">{product.title}</h1>
  <a href="javascript:history.back()" class="text-blue-500">← Volver</a>

  <form class="grid grid-cols-1 sm:grid-cols-2 gap-4">

    <input type="hidden" name="id" value={product.id}>

    <!-- Datos generales -->
    <div class="mt-2">
      <h2 class="text-lg font-semibold text-white">Datos generales</h2>

      <!-- Titulo -->
      <div class="mb-4">
        <label for="title" class="block text-white">Título</label>
        <input
          type="text"
          id="title"
          name="title"
          value={product.title}
          class="w-full p-2 border border-gray-300 rounded"
          maxlength="50"  

        />
      </div>

      <!-- Slug -->
      <div class="mb-4">
        <label for="slug" class="block text-white">Slug</label>
        <input
          type="text"
          id="slug"
          name="slug"
          value={product.slug}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Descripción -->
      <div class="mb-4">
        <label for="description" class="block text-white">Descripción</label>
        <textarea
          id="description"
          name="description"
          class="w-full p-2 border border-gray-300 rounded"
          rows="8">{product.description}</textarea
        >
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <!-- Precio -->
        <div class="mb-4">
          <label for="price" class="block text-white">Precio</label>
          <input
            type="number"
            id="price"
            name="price"
            value={product.price}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <!-- Inventario -->
        <div class="mb-4">
          <label for="stock" class="block text-white">Inventario</label>
          <input
            type="number"
            id="stock"
            name="stock"
            value={product.stock}
            class="w-full p-2 border border-gray-300 rounded" 
          />
        </div>
      </div>

      <!-- Labels -->
      <div class="mb-4">
        <label for="tags" class="block text-white"
          >Etiquetas <small class="text-gray-500">(Separado por comas)</small
          ></label
        >
        <input
          type="text"
          id="tags"
          name="tags"
          value={product.tags}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>
      
      
      <div class="grid grid-cols-2 gap-4">
        <!-- Gender -->
        <div class="mb-4">
          <label for="gender" class="block text-white">Sexo</label>
          <select
            class="w-full p-2 border border-gray-300 rounded"
            name="gender"
          >
            <option value="">[ Seleccione ]</option>
            {
              ['men', 'women', 'unisex', 'kid'].map((gender) => (
                <option
                  value={gender}
                  class="capitalize"
                  selected={gender === product.gender}
                >
                  {gender.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Type -->
        <div class="mb-4">
          <label for="tags" class="block text-white">Tipo</label>
          <select class="w-full p-2 border border-gray-300 rounded" name="type">
            <option value="">[ Seleccione ]</option>
            {
              [
                'shirts', 'pants', 'hoodies', 'hats', 'beatles', 'chaquetas', 'vestidos', 'pantys', 
                'bufandas', 'sweater', 'top', 'poleras', 'blusas', 'shorts', 'faldas', 'calzas', 'pantalones', 'jeans', 'enteritos'
              ].map((type) => (
                <option
                  value={type}
                  class="capitalize"
                  selected={type === product.type}
                >
                  {type.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>
        
      </div>

      <!-- Tallas -->
      <div class="mb-4">
        <label for="sizes" class="block text-white">Tallas</label>
        <div class="flex text-white">
          {
            ['XS', 'S', 'M', 'L', 'XL', 'XXL'].map((size) => (
            <button
                type="button"
                class="btn-size"
                onclick="this.classList.toggle('active')"
                class:list={
                  product.sizes.split(',').includes(size) ? 'active' : ''
                }
              >{size}</button>
            ))
          }
        </div>
      </div>
            <!-- Categoria -->
            <div class="mb-4">
              <label for="categorys" class="block text-white">Categoria</label>
              <div class="flex text-white">
                {
                  ['Otoño/Invierno' , 'Primavera/Verano'].map((category) => (
                  <button
                      type="button"
                      class="btn-category"
                      onclick="this.classList.toggle('active')"
                      class:list={
                        product.categorys.split(',').includes(category) ? 'active' : ''
                      }
                    >{category}</button>
                  ))
                }
              </div>
            </div>
           <!-- Colores -->
<div class="mb-4">
  <label for="colors" class="block text-white">Colores</label>
  <div class="flex text-white">
    {
      ['red', 'blue', 'black', 'white', 'green', 'yellow', 'pink', 'purple', 'gray', 'orange'].map((color) => (
      <button
          type="button"
          class="btn-color"
          onclick="this.classList.toggle('active')"
          class:list={
            product.colors.split(',').includes(color) ? 'active' : ''
          }
        >{color}</button>
      ))
    }
  </div>
</div>
    </div>

    <!-- Imagenes -->
    <div>
      <!-- File upload -->
      <div class="mt-4 text-white">
        
         <!-- Guardar  -->
        <div class="flex justify-end">
          <button class="bg-blue-500 mb-5 p-2 rounded text-white"
            >Guardar producto</button
          >
        </div>
          <!-- Botón para eliminar el producto -->
          <!-- Botón para eliminar el producto -->
          <div class="flex justify-end">
                <button
                  type="button"
                  class="btn-delete-product bg-red-500 mb-5 p-2 rounded text-white"
                  data-id={product.id}
                >
                  Eliminar producto
                </button>
          </div>
          
        <!-- File input -->
        <div class="flex items-center justify-center w-full">
          <label
            for="file-upload"
            class="flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-600"
            id="drop-zone"
          >
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg
                class="w-8 h-8 mb-4 text-gray-500"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12"
                ></path>
              </svg>
              <p class="mb-2 text-sm text-gray-500" id="lbl-selected-files">
                <span class="font-semibold">Click aquí </span> o arrastra los archivos
              </p>
              <p class="text-xs text-gray-500">
                SVG, PNG, JPG or GIF (max. 800x400px)
              </p>
            </div>

            <!-- class="hidden" -->
            <!-- accept only images -->
            <input
              id="file-upload"
              name="imageFiles"
              type="file"
              accept="image/*"
              multiple
            />
          </label>
        </div>

        <!-- Slideshow -->
        <ProductSlideshow images={images.map((i) => i.image)} />

        <table class="w-full border">
          <thead>
            <tr>
              <th>Imagen</th>
              <th>Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              images.map(({ image, id }) => (
                <tr class="border" id={id}>
                  <td class="flex justify-center">
                    <ProductImage
                      src={image}
                      alt={product.title}
                      className="w-16 h-16 rounded"
                    />
                  </td>
                  <td class="text-center">
                    <button type="button" data-id={id} class="btn-delete-image">
                      X
                    </button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>

  <style>
    .btn-size,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }
    .btn-color,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }
    .btn-category,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-auto h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }

  </style>
</MainLayout>

<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const form = document.querySelector('form') as HTMLFormElement;
    const sizeButtons = document.querySelectorAll('.btn-size');
    const colorButtons = document.querySelectorAll('.btn-color');
    const categoryButtons = document.querySelectorAll('.btn-category');
    const btnsDeleteImage = document.querySelectorAll('.btn-delete-image');
    const btnsDeleteProduct = document.querySelectorAll('.btn-delete-product');

btnsDeleteProduct.forEach((btn) => {
  btn.addEventListener('click', async () => {
    const id = btn.getAttribute('data-id');
    if (!id) {
      console.error('No ID found');
      return;
    }

    try {
      const { error } = await actions.deleteProduct.safe({ id });
      
      if (error) {
        console.log(error);
        alert('Error al eliminar el producto: ' + error.message);
        return;
      }

      btn.closest('tr')?.remove();

      window.location.href = '/admin/dashboard'; 
    } catch (error) {
      alert('Error al eliminar el producto: ' + error);
    }
  });
});

    const lblSelectedFiles = document.querySelector(
      '#lbl-selected-files'
    ) as HTMLParagraphElement;
    const dropZone = document.querySelector('#drop-zone') as HTMLLabelElement;
    const fileInput = document.querySelector(
      '#file-upload'
    ) as HTMLInputElement;

    if (!form) {
      return;
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const selectedCategorys = Array.from(categoryButtons)
          .filter((btn) => btn.classList.contains('active'))
          .map((btn) => btn.textContent?.trim())
          .join(',');

        // Obtén las tallas seleccionadas
        const selectedSizes = Array.from(sizeButtons)
          .filter((btn) => btn.classList.contains('active'))
          .map((btn) => btn.textContent?.trim())
          .join(',');

        // Obtén los colores seleccionados
        const selectedColors = Array.from(colorButtons)
          .filter((btn) => btn.classList.contains('active'))
          .map((btn) => btn.textContent?.trim())
          .join(',');

        // Añadir tallas y colores a FormData
        const formData = new FormData(form);
        formData.set('sizes', selectedSizes);
        formData.set('colors', selectedColors);
        formData.set('categorys', selectedCategorys);

        const formValues = Object.fromEntries(formData.entries());
        console.log(formValues);

        const { data, error } = await actions.createUpdateProduct.safe(formData);

        if (error) {
          return alert(error.message);
        }

        navigate(`/admin/products/${data.slug}`);
      });


    // Eliminar imagenes

    btnsDeleteImage.forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        const id = btn.getAttribute('data-id');
        if (!id) return;

        const { error } = await actions.deleteProductImage.safe(id);
        if (error) {
          console.log(error);
          alert(error);
          return;
        }

        const trId = `#${id}`;
        document.querySelector(trId)?.remove();

      });
    });

    // Drag & Drop

    const preventDefaults = (e: DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
    };

    const highlight = (e: DragEvent) => {
      dropZone.classList.add('border-blue-500', 'bg-blue-50');
    };

    const unHighlight = (e: DragEvent) => {
      dropZone.classList.remove('border-blue-500', 'bg-blue-50');
    };

    const createFileList = (files: File[]): FileList => {
      const dataTrasfer = new DataTransfer();
      files.forEach((file) => dataTrasfer.items.add(file));
      return dataTrasfer.files;
    };

    const handleFiles = (files: FileList) => {
      const validFiles = Array.from(files).filter((file) =>
        file.type.startsWith('image/')
      );

      if (fileInput && validFiles.length > 0) {
        fileInput.files = createFileList(validFiles);
      }

      lblSelectedFiles.innerHTML = `<strong>${validFiles.length} archivos seleccionados</strong>`;
    };

    (['dragenter', 'dragover', 'dragleave', 'drop'] as const).forEach(
      (eventName) => {
        dropZone.addEventListener(eventName, preventDefaults);
        document.body.addEventListener(eventName, preventDefaults);
      }
    );

    (['dragenter', 'dragover'] as const).forEach((eventName) => {
      dropZone.addEventListener(eventName, highlight);
    });

    (['dragleave', 'drop'] as const).forEach((eventName) => {
      dropZone.addEventListener(eventName, unHighlight);
    });

    // Sólo imágenes
    dropZone.addEventListener('drop', (e) => {
      const files = e.dataTransfer?.files;

      if (files) {
        handleFiles(files);
      }
    });

    // fin del astro:load
  });
</script>